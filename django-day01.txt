Lshengshengwork
echo "# Django" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/Lshengshengwork/Django.git
git push -u origin master

基础步骤——流程梳理：
1. Django中创建工程 ： django-admin startproject  project
2. Django创建项目命令： python manage.py startapp  myApp
3. 激活项目： 修改settings.py 中的INSTALLED_APPS，最后添加项目，比如我创建的是myApp，就在最后添加这样就行了 'myApp',
4. 配置数据库： 
		1） 修改__init__.py 文件  
		2） 修改settings.py 文件中的DATABASES
5.  创建模型类 ： 在项目目录下的models.py 文件中 
6. 生成迁移文件： python manage.py makemigrations
7.  执行迁移  python manage.py migrate
8. 启动服务器： python manage.py runserve

9.   配置站点
10.  创建模板目录/项目模板目录： 同级templates-myApp
11.  在settings.py文件中TEMPLATES配置模板路径
12.  在project修改urls.py
13 . 在项目目录下创建urls.py



生成迁移文件： python manage.py makemigrations   在migrations目录下生成一个迁移文件，此时数据库中还没有生成表
执行迁移  ：  python manage.py migrate      相当于执行sql语句创建数据表
测试数据操作： 1. dos窗口输入   < python manage.py shell >  
			   2. 导入一些包：  from myApp.models import Grades,Students
								from django.utils import timezone
								from datetime import *
			   3. 查询所有数据 ： 1.   Grades.objects.all()
			   
			   4. 添加数据 ： grade1 = Grades()
							  grade1.gname = "python04"
							  grade1.gdate = datetime(year=2019,month=1,day=13)
							  grade1.ggirlnum = 3
							  grade1.gboynum = 70
							  grade1.save()
			   5.  查看某个对象：  Grades.objects.get(pk=2)
	               用一访问多格式：  对象.模型类小写_set     示例： grade.students_set
				   访问id ： 格式： .对象.属性_id    示例： .student.sgrade_id
			   6.  修改数据  ： grade1.gboynum = 60
								grade1.save()
			   7. 删除数据  ： grade1.delete()    注意：该方法是物理删除——数据库中的表里的数据被删除了
			   
			   
第二天学习：

启动服务器：  python manage.py runserver ip:port
			ip可以不写，不写的话代表本机，  端口号默认是8000
			说明： 这是一个纯python写的轻量级web服务器，仅仅在开发测试中使用
			
			
Admin站点管理： 
1. 概述：   内容发布： 负责添加 修改 删除内容
			公告访问：
			
2.  配置Admin应用： 在settings.py 文件中INSTALLED_APPS 添加 'django.contrib.admin'   ； 一般都是默认添加上
3.  创建管理员用户 ： 执行 < python manage.py createsuperuser >    
					  依次输入用户名 邮箱 密码
	进入管理员页面就是 127.0.0.1:8000/admin  进入时是英文，需要汉化
	汉化： 在settings.py 文件中 修改： LANGUAGE_CODE = 'zh-Hans'    TIME_ZONE = 'Asia/Shanghai'
4. 管理数据表
	1） 修改admin.py 文件，例子：  
							from .models import Grades,Students
							# 注册
							admin.site.register(Grades)
							admin.site.register(Students)
							
	2）自定义管理页面： 
		列表页属性： list_display  显示字段  ； list_filter  过滤字段 ；  search_fields   搜索字段  ； list_per_page  分页 
				代码： class GradesAdmin(admin.ModelAdmin):
						#列表页属性
						list_display = ['pk','gname','gdate','ggirlnum','gboynum','isDelete']
						list_filter = ['gname']
						search_fields = ['gname']
						list_per_page = 5 
						
		添加 、 修改页属性： fields  ， 属性的先后顺序 ；  fieldsets  给属性分组
		注意： fields 和 fieldsets 不能同时使用
	全部代码：  from .models import Grades,Students
				# 注册
				class GradesAdmin(admin.ModelAdmin):
					#列表页属性
					list_display = ['pk','gname','gdate','ggirlnum','gboynum','isDelete']
					list_filter = ['gname']
					search_fields = ['gname']
					list_per_page = 5

					#添加 、 修改 页属性
					# fields = ['ggirlnum','gboynum','gname','gdate','isDelete']
					fieldsets = [
						("num",{"fields":['ggirlnum','gboynum']}),
						("base",{"fields":['gname','gdate','isDelete']}),
					]

				admin.site.register(Grades,GradesAdmin)
				admin.site.register(Students)
					
	
关联对象：
		需求： 在创建一个对象时可以直接添加几个学生
		代码： class StudentInfo(admin.TabularInline):  # StackedInline 这种也可以，只是格式不一样
					model = Students
					extra = 2

				class GradesAdmin(admin.ModelAdmin):
					inlines = [StudentInfo]
					
布尔值显示问题：定义一个函数来处理就OK
	
	直接看代码：class StudentAamin(admin.ModelAdmin):
					def gender(self):
						if self.sgender:
							return "男"
						else:
							return "女"
					#设置页面列的名称
					gender.short_description = '性别'

					list_display = ['pk','sname',gender,'sage','scontend','isDelete']
					list_per_page = 10

				admin.site.register(Students,StudentAamin)
					
	
执行动作的问题：
执行的动作在上面还是上面显示    
actions_on_bottom = True
actions_on_top = False
	代码： class StudentAamin(admin.ModelAdmin):
				def gender(self):
					if self.sgender:
						return "男"
					else:
						return "女"
				#设置页面列的名称
				gender.short_description = '性别'

				list_display = ['pk','sname',gender,'sage','scontend','isDelete']
				list_per_page = 10
				# 执行动作的位置
				actions_on_bottom = True
				actions_on_top = False

			admin.site.register(Students,StudentAamin)
	

	3） 使用装饰器注册
		  很简单，就是把下面的注释，上面用装饰器，看下面代码：
		    @admin.register(Students)
			class StudentAamin(admin.ModelAdmin):
				def gender(self):
					if self.sgender:
						return "男"
					else:
						return "女"
				#设置页面列的名称
				gender.short_description = '性别'

				list_display = ['pk','sname',gender,'sage','scontend','isDelete']
				list_per_page = 10
				# 执行动作的位置
				actions_on_bottom = True
				actions_on_top = False

			# admin.site.register(Students,StudentAamin)
		  
	
	
	
	


视图的基本使用：
		1. 概述： 在Django中，视图对web请求进行回应  ；  视图就是一个python函数，在views.py文件中定义
		2. 定义视图：
			定义了一个最简单的视图，没有使用模板，代码如下：
			from django.http import HttpResponse
			def index(request):
				return HttpResponse("sunck is a good man")
	
	
		2.配置url：
			修改project目录下的urls.py文件
				from django.conf.urls import url,include
				from django.contrib import admin

				urlpatterns = [
					url(r'^admin/', admin.site.urls),
					url(r'^', include('myApp.urls')),
				]

			
			在myApp应用目录下创建一个urls.py文件
				from django.conf.urls import url
				from . import views
				urlpatterns = [
					url(r'^$', views.index),
				]
				

模板的基本使用：
		1. 概述： 模板是html页面，可以根据视图中传递过来的数据进行填充
		2. 创建模板目录： 创建templates目录，在目录下创建对应项目的模板目录(project-templates-myApp)
		3. 配置模板路径：修改settings.py 文件下的TEMPLATES 的DIRS：   'DIRS': [os.path.join(BASE_DIR,'templates')],
		
		4. 定义grades.html 和 students.html模板
				1） 模板语法 ：  {{ 输出值，可以是变量，也可以是对象.属性 }}
								{{ % 执行代码段 % }}     例如for循环 ｛% for i in list %｝     结束要写 {% endfor %}
		
		5.有一个需求： 输入该url显示班级信息： http://127.0.0.1:8000/grades
				步骤： 1） 写grades模板    看github代码(templates-myApp-grades.html)
					   2） 定义视图        from .models import Grades
											def grades(request):
												# 去模板里取数据
												gradesList = Grades.objects.all()
												# 将数据传递给模板，模板再渲染页面，将渲染好的页面返回浏览器
												return render(request, 'myApp/grades.html',{'grades':gradesList})
												
					   3） 配置url        url(r'^grades/$', views.grades),
	
	
	
	
		6. 点击班级，显示对应班级的所有学生：
				步骤：   模板改动了这里(把#换成了grade.id)： <a href="{{grade.id}}">{{ grade.gname }}</a>
					1） 定义视图：  def gradeStudents(request,num):
										# 获得对应的班级对象
										grade = Grades.objects.get(pk=num)
										# 获得班级下的所有学生对象列表
										studentList = grade.students_set.all()
										return render(request, 'myApp/students.html',{'students':studentList})
	
	
					  2） 配置url ：  url(r'^grades/(\d+)/$', views.gradeStudents),
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	