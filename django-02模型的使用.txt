

模型：
	1.Django对各种数据库提供了很好的支持，Django为这些数据库提供了统一的调用API，可以根据不同的业务需求使用不同的数据库
	2. 配置数据库
		1） 修改工程目录下的__init__.py文件 ：  
			import pymysql
			pymysql.install_as_MySQLdb()       	注意： 3.x 版本是添加的这句话，2.x 版本没有用这个库
		2） 修改settings.py 文件中的DATABASES
	3. 开发流程：
		1） 配置数据库
		2） 定义模型类： 一个模型类都在数据库中对应一张数据表
		3） 生成迁移文件
		4） 执行迁移生成数据表
		5） 使用模型类进行增删改查操作
	4. ORM  
		1） 概述 ： 对象-关系-映射
		2） 任务： 1. 根据对象的类型生成表结构
				   2. 将对象、列表的操作转换成sql语句
				   3. 将sql语句查询到的结果转换成对象、列表
		3） 优点： 极大的减轻了开发人员的工作量，不需要面对因数据库的变更而修改代码
	
	5. 定义模型
		1） 模型、属性、表、字段间的关系  ： 一个模型类在数据库中对应的一张表，在模型类中定义的属性，对应该模型对照表中的一个字段
		2） 定义属性： 如果忘记具体看kaige的Django模型03
		3) 创建模型类
		4）元选项 ： 1. 在模型类中定义Meta类，用于设置元信息
					 2. db_table  : 定义数据表名，推荐使用小写，数据表名默认为项目名小写_类型小写
					 3. ordering  ： 对象的默认排序字段，获取对象的列表时使用
									ordering = ['id']     升序
									ordering = ['-id']    降序
									注意： 排序会增加数据库的开销
									
		  完整代码：
		  from django.db import models
		# Create your models here.
		class Grades(models.Model):
			gname = models.CharField(max_length=20)
			gdate = models.DateTimeField()
			ggirlnum = models.IntegerField()
			gboynum = models.IntegerField()
			isDelete = models.BooleanField(default=False)
			def __str__(self):
				return self.gname
			class Meta:
				db_table = 'grades'

		class Students(models.Model):
			sname = models.CharField(max_length=20)
			sgender = models.BooleanField(default=True)
			sage = models.IntegerField()
			scontend = models.CharField(max_length=30)
			isDelete = models.BooleanField(default=False)
			# 关联外键
			sgrade = models.ForeignKey("Grades")
			def __str__(self):
				return self.sname

			lastTime = models.DateTimeField(auto_now=True)
			createTime = models.DateTimeField(auto_now_add=True)

			class Meta:
				db_table = 'students'
				ordering = ['id']
				
				
	6. 模型成员：
		1. 类属性
			1）objects   
					1. 是Manager类型的一个对象，作用是与数据库进行交互
					2. 当定义模型类是没有指定管理器，则django为模型创建一个名为objects的管理器
			2）自定义管理器
					代码：
						class Students(models.Model):
							# 自定义模型管理器
							# 当自定义模型管理器，objects就不存在了
							stuObj = models.Manager()
			3） 自定义管理器Manager类：
					作用：
						1. 向管理器中添加额外的方法
						2. 修改管理器返回的原始查询集 ：  重写get_queryset()方法
					代码示例：
					class StudentsManager(models.Manager):
						def get_queryset(self):
							return super(StudentsManager,self).get_queryset().filter(isDelete=False)

					class Students(models.Model):
						# 自定义模型管理器
						# 当自定义模型管理器，objects就不存在了
						stuObj = models.Manager()
						stuObj2 = StudentsManager()
					
		2. 创建对象：
			目的： 向数据库中添加数据
			当创建对象时：Django不会对数据库进行读写操作，当调用save()方式时才与数据库进行交互，将对象保存到数据表中
			注意：__init__方法已经在父类models.Model中使用，在自定义的模型中无法使用
			方法： 
				1） 在模型类中添加一个类方法
					代码示例：
					class Students(models.Model):
						# 定义一个类方法创建对象
						@classmethod
						def createStudent(cls, name,age,gender,grade,contend,lastT,createT,isD=False):
							stu = cls(sname = name, sage = age, sgender = gender, scontend = contend,sgrade = grade, lastTime = lastT, createTime = createT,isDelete=isD)
							return stu
					
				2） 在自定义管理器中添加一个方法
					代码示例：
					class StudentsManager(models.Manager):
						def get_queryset(self):
							return super(StudentsManager,self).get_queryset().filter(isDelete=False)

						def createStudent(self,name,age,gender,grade,contend,lastT,createT,isD=False):
							stu = self.model()
							stu.sname = name
							stu.age   = age
							stu.sgender = gender
							stu.sgrade = grade
							stu.scontend = contend
							stu.lastTime = lastT
							stu.createTime = createT
							return stu
									
				
				
	7. 模型查询：	
			概述： 1. 查询集表示从数据库获取的对象集合
				   2. 查询集可以有多个过滤器
				   3. 过滤器就是一个函数，基于所给的参数限制查询集结果
				   4. 从sql角度来说，查询集和select语句等价，过滤器就像where条件
			
			查询集：1. 在管理器上调用过滤器方法 返回查询集
					2. 查询集经过过滤器筛选后返回新的查询集，所以可以写成链式调用
					3. 惰性执行  ：  创建查询集不会带来任何数据的访问，直到调用数据时，才会访问数据
					4. 直接访问数据的情况： 1） 迭代
											2） 序列化
											3） 与if合用
					5. 返回查询集的方法称为过滤器： 1）  all()         返回查询集中所有数据
													2)	 filter()      返回符合条件的数据      两种用法：1. filter(键=值)  filter(键=值,键=值)  ; 2. filter(键=值).filter(键=值) ；多个条件就是且的关系
													3)	 exclude()	   过滤掉符合条件的数据
													4）	 order_by()	   排序 
													5）  values()	   一条数据就是一个对象(字典)，返回一个列表
													
					6.  返回单个数据：	1） get()		返回一个满足条件的对象 。 
														注意： 如果没有找到符合条件的对象，会引发"模型类.DoesNotExist"异常  --用try处理就行
															   如果找到多个对象，会引发"模型类.MultipleObjectsReturned"异常
										2)	count()		返回查询集中的对象个数
										3)	first()		返回查询集中第一个对象
										4)	last()		返回查询集中最后一个对象
										5)	exists()	判断查询集中是否有数据，如果有数据，返回True，没有数据返回False
					
					7.  限制查询集：	查询集返回列表，可以使用下标的方法进行限制，等同于sql中的limit语句 
										注意：下标不能是负数。   示例 :studentsList = Students.stuObj2.all()[0:5]
										
					8.  查询集的缓存：  1）概述： 每个查询集都包含一个缓存，来最小化的对数据库访问
												  在新建的查询集中，缓存首次为空，第一次对查询集求值，会发生数据缓存，Django会将查询出来的数据做一个缓存，并返回查询结果，以后的查询直接使用查询集的缓存
												  
					9.  字段查询：		1） 概述：  实现了sql中的where语句，作为方法filter() 、exclude() 、 get() 的参数
												    语法：属性名称__比较运算符=值（示例：sage__>=20）
													外键：属性名_id
													转义：类似SQL中like语句
														  就是说在这里就不需要转义了， like语句中使用%是为了匹配占位，匹配数据中的%（where like "\%"）
														  在这里直接就转义了：   示例：filter(sname__contains='%')
												
										2） 比较运算符
													1. exact                   判断，大小写敏感。       示例： filter(isDelete=False)
													2. contains                是否包含，大小写敏感。   示例： studentsList = Students.stuObj2.filter(sname__contains="李")
													3. startswith、endswith    以value开头或结尾、大小写敏感。   示例： studentsList = Students.stuObj2.filter(sname__startswith="李")
													4. 以上四个在前面加个i，就表示不区分大小写 iexact、icontains、istartswith、iendswith
													
													5.  isnull、isnotnull     是否为空 。 			   示例： filter(sname__isnull=False)
													6.  in 					  是否包含在范围内  。     示例： studentsList = Students.stuObj2.filter(pk__in=[2,4,5])   #把id等于 2 4 5 的值查询出来
													7.  gt	 大于    
														gte	 大于等于         示例： studentsList = Students.stuObj2.filter(sage__gte=30)   #把年龄大于等于30的给查询出来
														lt	 小于
														lte	 小于等于
													8.  year				  示例： studentsList = Students.stuObj2.filter(lastTime__year=2017)   #根据最后修改时间是2017年的值全部查询出来
														month
														day
														week_day
														hour
														minute
														second
													9.	跨关联查询		处理join查询     语法：模型类名__属性名__比较运算符
														代码示例：
														    grade = Grades.objects.filter(students__scontend__contains='詹姆斯')   #描述中带有‘詹姆斯’这三个字的数据是属于哪个班级的
															print(grade)
														
													10  查询快捷		pk   代表的主键
										
										3） 聚合函数
													1.  使用aggregate()函数返回聚合函数的值
														Avg
														Count
														Max				示例：   from django.db.models import Max,Min     #注意：要引用这个包，需要用哪个就引入哪个
																				    maxAge = Students.stuObj2.aggregate(Max('sage'))         # 这里是找到年龄最大的那个值，并打印
																					print(maxAge)
														Min
														Sum
										4） F对象	
													1.  可以使用模型的A属性与B属性进行比较
													代码示例：
													    from django.db.models import F,Q
														def grades(request):
															g = Grades.objects.filter(gboynum__gt=F('ggirlnum'))         # 找到男生比女生多的班级，并打印
															print(g)
															return HttpResponse("ooookkk")
															
													2.  支持F对象的算术运算
														代码示例：  g = Grades.objects.filter(gboynum__gt=F('ggirlnum')+20)  # 意思是ggirlnum的值再加20后，在与前面的gboynum进行比较
										5） Q对象
													概述：  过滤器的方法中的关键字参数，条件为And模式
													需求：  进行or查询
													解决：  使用Q对象
													代码示例： studentsList = Students.stuObj2.filter(Q(pk__lte=3) | Q(sage__gt=40))   #Q解决或的关系，这个是查询id小于等于3或者年龄大于40的值
															   studentsList = Students.stuObj2.filter(Q(pk__lte=3))   			#只有一个Q对象，就是用于匹配的
															   studentsList = Students.stuObj2.filter(~Q(pk__lte=3))   	 #Q前面加个波浪~，是取反的意思。
													
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				