

模型：
	1.Django对各种数据库提供了很好的支持，Django为这些数据库提供了统一的调用API，可以根据不同的业务需求使用不同的数据库
	2. 配置数据库
		1） 修改工程目录下的__init__.py文件 ：  
			import pymysql
			pymysql.install_as_MySQLdb()       	注意： 3.x 版本是添加的这句话，2.x 版本没有用这个库
		2） 修改settings.py 文件中的DATABASES
	3. 开发流程：
		1） 配置数据库
		2） 定义模型类： 一个模型类都在数据库中对应一张数据表
		3） 生成迁移文件
		4） 执行迁移生成数据表
		5） 使用模型类进行增删改查操作
	4. ORM  
		1） 概述 ： 对象-关系-映射
		2） 任务： 1. 根据对象的类型生成表结构
				   2. 将对象、列表的操作转换成sql语句
				   3. 将sql语句查询到的结果转换成对象、列表
		3） 优点： 极大的减轻了开发人员的工作量，不需要面对因数据库的变更而修改代码
	
	5. 定义模型
		1） 模型、属性、表、字段间的关系  ： 一个模型类在数据库中对应的一张表，在模型类中定义的属性，对应该模型对照表中的一个字段
		2） 定义属性： 如果忘记具体看kaige的Django模型03
		3) 创建模型类
		4）元选项 ： 1. 在模型类中定义Meta类，用于设置元信息
					 2. db_table  : 定义数据表名，推荐使用小写，数据表名默认为项目名小写_类型小写
					 3. ordering  ： 对象的默认排序字段，获取对象的列表时使用
									ordering = ['id']     升序
									ordering = ['-id']    降序
									注意： 排序会增加数据库的开销
									
		  完整代码：
		  from django.db import models
		# Create your models here.
		class Grades(models.Model):
			gname = models.CharField(max_length=20)
			gdate = models.DateTimeField()
			ggirlnum = models.IntegerField()
			gboynum = models.IntegerField()
			isDelete = models.BooleanField(default=False)
			def __str__(self):
				return self.gname
			class Meta:
				db_table = 'grades'

		class Students(models.Model):
			sname = models.CharField(max_length=20)
			sgender = models.BooleanField(default=True)
			sage = models.IntegerField()
			scontend = models.CharField(max_length=30)
			isDelete = models.BooleanField(default=False)
			# 关联外键
			sgrade = models.ForeignKey("Grades")
			def __str__(self):
				return self.sname

			lastTime = models.DateTimeField(auto_now=True)
			createTime = models.DateTimeField(auto_now_add=True)

			class Meta:
				db_table = 'students'
				ordering = ['id']
				
				
	6. 模型成员：
		1. 类属性
			1）objects   
					1. 是Manager类型的一个对象，作用是与数据库进行交互
					2. 当定义模型类是没有指定管理器，则django为模型创建一个名为objects的管理器
			2）自定义管理器
					代码：
						class Students(models.Model):
							# 自定义模型管理器
							# 当自定义模型管理器，objects就不存在了
							stuObj = models.Manager()
			3） 自定义管理器Manager类：
					作用：
						1. 向管理器中添加额外的方法
						2. 修改管理器返回的原始查询集 ：  重写get_queryset()方法
					代码示例：
					class StudentsManager(models.Manager):
						def get_queryset(self):
							return super(StudentsManager,self).get_queryset().filter(isDelete=False)

					class Students(models.Model):
						# 自定义模型管理器
						# 当自定义模型管理器，objects就不存在了
						stuObj = models.Manager()
						stuObj2 = StudentsManager()
					
		2. 创建对象：
			目的： 向数据库中添加数据
			当创建对象时：Django不会对数据库进行读写操作，当调用save()方式时才与数据库进行交互，将对象保存到数据表中
			注意：__init__方法已经在父类models.Model中使用，在自定义的模型中无法使用
			方法： 
				1） 在模型类中添加一个类方法
					代码示例：
					class Students(models.Model):
						# 定义一个类方法创建对象
						@classmethod
						def createStudent(cls, name,age,gender,grade,contend,lastT,createT,isD=False):
							stu = cls(sname = name, sage = age, sgender = gender, scontend = contend,sgrade = grade, lastTime = lastT, createTime = createT,isDelete=isD)
							return stu
					
				2） 在自定义管理器中添加一个方法
					代码示例：
					class StudentsManager(models.Manager):
						def get_queryset(self):
							return super(StudentsManager,self).get_queryset().filter(isDelete=False)

						def createStudent(self,name,age,gender,grade,contend,lastT,createT,isD=False):
							stu = self.model()
							stu.sname = name
							stu.age   = age
							stu.sgender = gender
							stu.sgrade = grade
							stu.scontend = contend
							stu.lastTime = lastT
							stu.createTime = createT
							return stu
									
				
				
	7. 模型查询：			
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				